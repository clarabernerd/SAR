COURS SAR 14/09


SPECIFICATION WORK
========================================================================
// Le Broker permet de créer des Channel, avec un nom et un port. 
//CORRECTION : Créée deux objets Channel qui forment "un tuyau" avec deux sorties. 
abstract class Broker {
	Broker(String name);
	
	Channel accept(int port); // permet d'acepter une connexion sur un port spécifique. C'est bloquant.
	
	Channel connect(String name, int port) //permet de demander une connexion sur un channel spécifique et sur un port spécifique. C'est bloquant.
	
 }
 
 //Permet une communication entre deux tâches. Permet de lire et d'envoyer des octets sur un channel. Deux channels sont connectés. 
// CORRECTION : Il fallait décider si on été dans le cas de UDP (on envoie un paquet et on reçoit un paquet) ou dans le cas TCP (on envoie un un flux d'octets). TCP est fifo et lossless ce qui n'est pas le cas de UDP. si la connexion est coupée sur un des deux channel, l'autre peut continuer à lire ce qu'il reste mais ne peut pas écrire de nouveaux octets.
 abstract class Channel {
 
 	int read(byte[] byte, int offset, int length); // Cette méthode permet à l'une des deux entités (client) de lire un message qui a été envoyé. Le message est contenue dans un buffer (ou tableau d'octet) nommé byte. Il est nécessaire d'avoir en paramètre de cette méthode un indicateur du début de message (offset = position du début de message dans le buffer) ainsi que la longueur du message (length), pour que l'entité qui lise le message sache si elle a tout lu ou non. Cette méthode renvoie un entier, on suppose que c'est 1 si le message a bien été lu et 0 sinon.
 	
 //CORRECTION : l'entier retourné est le nombre d'octet effectivement lu. On peut lever une exception si cet entier est différent de length. Si une exception est levée, on passe diconnected à true, on ne peut pas continuer à envoyer des octes sur le channel.
 //La méthode read doit être bloquante pour ne pas faire une boucle qui va créer une attente active. On bloque soit quand la totalité du buffer est arrivé pour la lecture, ou bien quand un nombre inférieur d'octets à length est arrivé. 
 	
 	int write(byte[]byte, int offset, int length); // Permet d'envoyer des octets sur le canal. Il faut également qu'elle contienne les deux paramètres cités (indicateur de début de message et longueur) pour informer le futur lecteur du message. Renvoie 1 si tout les octest on bien été envoyé et 0 sinon. 
 	
 //CORRECTION : On retourne ce qu'on a écrit et on attends pas que tout le buffer soit envoyé dans le channel. 
 	
 	void disconnected(); // méthode permettant de déconnecter les deux entités. Cela doit libérer le port du broker qui a été utilisé. 
//CORRECTION : Si c'est déconnecté sur un channel, on peut soit lever une exception et tout stopper sur l'autre channel même si il est entrain de lire. 
 Soit on ne bloque sur l'autre channel si il y a encore des chose à lire (mais pas écrire). 
 	
 	boolean disconnected(); //méthode permettant de savoir si il y a une connexion en cours sur ce channel. 
 	
 }
 
//CORRECTION : 
// Le fait qu'il y ait des threads ammène plusieurs points de vues. 
//Du point de vue de read et write, on a pas besoin de synchronisation car les buffer de lecture et d'écriture sont différents : pas de partage de ressources.
//Si on veut que plusieurs tâches partagent le même channel, ce n'est pas thread safe si on choisi d'utiliser la méthode TCP, car les méthodes read et write sont des boucles qui lisent et écrivent ce qu'elle peuvent. 
 abstract class task extends Thread {
 
 } =================================================================================
 
 
 
 
 EXEMPLE  =================================================================================
 Voir code java =================================================================================

